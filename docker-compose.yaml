
services:
  namenode:
    image: bde2020/hadoop-namenode:latest
    container_name: namenode
    platform: linux/amd64
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - hadoop_namenode_conda:/root/anaconda
      - ./configs/namenode_bashrc.txt:/root/.bashrc
    environment:
      - CLUSTER_NAME=hadoop-learning
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./hadoop.env
    networks:
      - hadoop-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9870"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s

  spark-master:
    image: bitnami/spark:latest
    container_name: spark-master
    platform: linux/amd64
    depends_on:
      - kafka-broker
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=false
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - hadoop-net
    volumes:
      - ./spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
  
  spark-worker-1:
    image: bitnami/spark:latest
    container_name: spark-worker-1
    platform: linux/amd64
    depends_on:
      - spark-master
    networks:
      - hadoop-net
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
    volumes:
       - spark-data1:/opt/spark-apps
       - spark-data1:/opt/spark-data
       - ./spark-defaults.conf:/opt/spark/conf/spark-defaults.conf
  
  spark-worker-2:
    image: bitnami/spark:latest
    container_name: spark-worker-2
    platform: linux/amd64
    depends_on:
      - spark-master
    networks:
      - hadoop-net
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=1G
      - SPARK_DRIVER_MEMORY=1G
      - SPARK_EXECUTOR_MEMORY=1G
      - SPARK_WORKLOAD=worker
    volumes:
       - spark-data2:/opt/spark-apps
       - spark-data2:/opt/spark-data
       - ./spark-defaults.conf:/opt/spark/conf/spark-defaults.conf

  datanode:
    image: mrugankray/datanode-python:1.0
    container_name: datanode
    platform: linux/amd64
    restart: always
    depends_on:
      namenode:
        condition: service_healthy
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
      - hadoop_datanode_conda:/root/anaconda
      - ./configs/datanode_bashrc.txt:/root/.bashrc
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: "hdfs://namenode:9000"
    ports:
      - "9864:9864"
    env_file:
      - ./hadoop.env
    networks:
      - hadoop-net

  # Setting Kafka cluster #
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.0
    hostname: zookeeper
    container_name: zookeeper
    platform: linux/amd64
    depends_on:
      - namenode
      - datanode
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - hadoop-net

  kafka-broker:
    image: confluentinc/cp-server:5.4.0
    hostname: kafka-broker
    container_name: kafka-broker
    platform: linux/amd64
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: "true"
      CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
    volumes:
      - kafka_broker:/var/lib/kafka/data
    networks:
      - hadoop-net

  producer-app:
    build: 
      context: ./app-producer
      dockerfile: Dockerfile
    container_name: producer-app
    platform: linux/amd64
    volumes:
      - producer-app:/app 
    working_dir: /app
    depends_on:
      - kafka-broker
    command: ["python", "stock_crypto.py"]
    networks:
      - hadoop-net
    restart: on-failure
  
  consumer-app:
    build: 
      context: ./app-consumer
      dockerfile: Dockerfile
    container_name: consumer-app
    platform: linux/amd64
    volumes:
      - consumer-app:/app 
    working_dir: /app
    depends_on:
      - kafka-broker
    command: ["python", "spark_consumer.py"]
    networks:
      - hadoop-net
    restart: always
    environment:
      - JVM_OPTS=-Djdk.internal.platform.cgroupv2.enable=false
      - SPARK_SUBMIT_OPTS=-Dlog4j2.disable.jmx=true
      - KAFKA_BROKER=kafka-broker:29092
      - FINANCIAL_TOPIC=financial_data
      - CRYPTO_TOPIC=crypto_data
      - HDFS_URI=hdfs://namenode:9000
      - USER_PATH=/user/spark
      - CHECKPOINT_PATH=/user/spark/checkpoints
      - JAVA_HOME=/usr
  
  watchdog:
    build: 
      context: ./app-watchdog
      dockerfile: Dockerfile
    container_name: watchdog
    platform: linux/amd64
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["/bin/sh", "-c", "/app/watchdog.sh"]
    depends_on:
      - kafka-broker
      - consumer-app
    restart: always

  backend:
    build:
      context: ./app-backend
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "6500:6500"
    depends_on:
      - kafka-broker
      - spark-master
    environment:
      - FLASK_APP=app.py
    networks:
      - hadoop-net
  
  frontend:
    build:
      context: ./app-frontend
      dockerfile: Dockerfile
    platform: linux/amd64
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - hadoop-net

volumes:
  hadoop_namenode:
  hadoop_namenode_conda:
  hadoop_namenode_spark:
  hadoop_namenode_zeppelin:
  hadoop_namenode_flume:
  hadoop_datanode:
  hadoop_datanode_conda:
  airflow_namenode:
  zookeeper_data:
  zookeeper_log:
  kafka_broker:
  producer-app:
  consumer-app:
  spark-data1:
  spark-data2:
    driver: local

networks:
  hadoop-net:
    driver: bridge